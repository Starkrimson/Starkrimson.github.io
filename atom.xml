<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>.init()</title>
  
  
  <link href="https://starkrimson.github.io/atom.xml" rel="self"/>
  
  <link href="https://starkrimson.github.io/"/>
  <updated>2022-04-08T01:13:01.262Z</updated>
  <id>https://starkrimson.github.io/</id>
  
  <author>
    <name>Starkrimson</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>真实世界的 SwiftUI+TCA：天气 App</title>
    <link href="https://starkrimson.github.io/2022/04/07/weather-app/"/>
    <id>https://starkrimson.github.io/2022/04/07/weather-app/</id>
    <published>2022-04-07T13:00:00.000Z</published>
    <updated>2022-04-08T01:13:01.262Z</updated>
    
    <content type="html"><![CDATA[<h1 id="WeatherApp"><a href="#WeatherApp" class="headerlink" title="WeatherApp"></a>WeatherApp</h1><p><a href="https://github.com/Starkrimson/WeatherApp">源码</a>在 GitHub</p><blockquote><p><a href="https://objccn.io/products/swift-ui">《SwiftUI 与 Combine 编程》(喵神)</a> 读后实践</p></blockquote><p>一个天气 App，可搜索、关注城市，查看城市详细天气预报。</p><p>由 SwiftUI 驱动的跨平台 app，包括 UI 布局、状态管理、网络数据获取和本地数据存储等等。</p><p>编译环境：macOS 12.0.1, Xcode 13.3, iOS 15.4</p><p><a href="https://user-images.githubusercontent.com/16103570/160243859-863413ce-c1ca-4775-8c56-3a322cef9f30.mp4">https://user-images.githubusercontent.com/16103570/160243859-863413ce-c1ca-4775-8c56-3a322cef9f30.mp4</a></p><h3 id="The-Composable-Architecture-可组装架构"><a href="#The-Composable-Architecture-可组装架构" class="headerlink" title="The Composable Architecture 可组装架构"></a><a href="https://github.com/pointfreeco/swift-composable-architecture">The Composable Architecture</a> 可组装架构</h3><blockquote><p><a href="https://gist.github.com/sh3l6orrr/10c8f7c634a892a9c37214f3211242ad">TCA 中文 readme</a></p></blockquote><ul><li>State：即状态，是一个用于描述某个功能的执行逻辑，和渲染界面所需的数据的类。</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">SearchState</span>: <span class="title class_">Equatable</span> &#123;</span><br><span class="line">    <span class="meta">@BindableState</span> <span class="keyword">var</span> searchQuery <span class="operator">=</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">var</span> list: [<span class="type">Find</span>.<span class="type">City</span>] <span class="operator">=</span> []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Action：一个代表在功能中所有可能的动作的类，如用户的行为、提醒，和事件源等。</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">SearchAction</span>: <span class="title class_">Equatable</span>, <span class="title class_">BindableAction</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> binding(<span class="type">BindingAction</span>&lt;<span class="type">SearchState</span>&gt;)</span><br><span class="line">    <span class="keyword">case</span> search(query: <span class="type">String</span>)</span><br><span class="line">    <span class="keyword">case</span> citiesResponse(<span class="type">Result</span>&lt;[<span class="type">Find</span>.<span class="type">City</span>], <span class="type">AppError</span>&gt;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Environment：一个包含功能的依赖的类，如API客户端，分析客户端等。</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">SearchEnvironment</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> mainQueue: <span class="type">AnySchedulerOf</span>&lt;<span class="type">DispatchQueue</span>&gt;</span><br><span class="line">    <span class="keyword">var</span> weatherClient: <span class="type">WeatherClient</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Reducer：一个用于描述触发「Action」时，如何从当前状态（state）变化到下一个状态的函数，它同时负责返回任何需要被执行的「Effect」，如API请求（通过返回一个「Effect」实例来完成）。</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> searchReducer <span class="operator">=</span> <span class="type">Reducer</span>&lt;<span class="type">SearchState</span>, <span class="type">SearchAction</span>, <span class="type">SearchEnvironment</span>&gt; &#123;</span><br><span class="line">    state, action, environment <span class="keyword">in</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">switch</span> action &#123;</span><br><span class="line">    <span class="keyword">case</span> .binding:</span><br><span class="line">        <span class="keyword">return</span> .none</span><br><span class="line">    <span class="keyword">case</span> .search(<span class="keyword">let</span> query):</span><br><span class="line">        <span class="keyword">struct</span> <span class="title class_">SearchCityId</span>: <span class="title class_">Hashable</span> &#123; &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> environment.weatherClient</span><br><span class="line">            .searchCity(query)</span><br><span class="line">            .receive(on: environment.mainQueue)</span><br><span class="line">            .catchToEffect(<span class="type">SearchAction</span>.citiesResponse)</span><br><span class="line">            .cancellable(id: <span class="type">SearchCityId</span>(), cancelInFlight: <span class="literal">true</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">case</span> .citiesResponse(<span class="keyword">let</span> result):</span><br><span class="line">        <span class="keyword">switch</span> result &#123;</span><br><span class="line">        <span class="keyword">case</span> .success(<span class="keyword">let</span> list):</span><br><span class="line">            state.list <span class="operator">=</span> list</span><br><span class="line">        <span class="keyword">case</span> .failure(<span class="keyword">let</span> error):</span><br><span class="line">            state.list <span class="operator">=</span> []</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> .none</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    .binding()</span><br><span class="line">    .debug()</span><br></pre></td></tr></table></figure><ul><li>Store：用于驱动某个功能的运行时（runtime）。将所有用户行为发送到「Store」中，令它运行「Reducer」和「Effects」。同时从「Store」中观测「State」，以更新UI。</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">SearchView</span>(</span><br><span class="line">    store: .<span class="keyword">init</span>(</span><br><span class="line">        initialState: .<span class="keyword">init</span>(),</span><br><span class="line">        reducer: weatherReducer,</span><br><span class="line">        environment: <span class="type">WeatherEnvironment</span>(mainQueue: .main, weatherClient: .live)</span><br><span class="line">    )</span><br><span class="line">)</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">SearchView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> store: <span class="type">Store</span>&lt;<span class="type">WeatherState</span>, <span class="type">WeatherAction</span>&gt;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">WithViewStore</span>(searchStore) &#123; viewStore <span class="keyword">in</span></span><br><span class="line">            <span class="type">List</span>(viewStore.list) &#123; item <span class="keyword">in</span></span><br><span class="line">                <span class="type">Cell</span>(<span class="operator">...</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            .searchable(text: viewStore.binding(\.<span class="variable">$searchQuery</span>))</span><br><span class="line">            .onSubmit(of: .search) &#123;</span><br><span class="line">                viewStore.send(.search(query: viewStore.searchQuery))</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分栏和导航"><a href="#分栏和导航" class="headerlink" title="分栏和导航"></a>分栏和导航</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">NavigationView</span> &#123;</span><br><span class="line">    <span class="comment">// 第一个 view 为左侧 sidebar</span></span><br><span class="line">    <span class="type">List</span> &#123;</span><br><span class="line">        <span class="comment">// 点击 link 会 push 到 destination；如果是分屏下，destination 会显示在 detailView。</span></span><br><span class="line">        <span class="type">NavigationLink</span>(destination: <span class="type">CityView</span>(city: city)) &#123;</span><br><span class="line">            <span class="type">Text</span>(city.description)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 第二个 view 为右侧 detail view</span></span><br><span class="line">    <span class="type">Image</span>(systemName: <span class="string">&quot;cloud.sun&quot;</span>).font(.largeTitle)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="网络请求"><a href="#网络请求" class="headerlink" title="网络请求"></a>网络请求</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">WeatherClient</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> searchCity: (<span class="type">String</span>) -&gt; <span class="type">Effect</span>&lt;[<span class="type">Find</span>.<span class="type">City</span>], <span class="type">AppError</span>&gt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extension</span> <span class="title class_">WeatherClient</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> live <span class="operator">=</span> <span class="type">WeatherClient</span>(</span><br><span class="line">        searchCity: &#123; query <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">guard</span> <span class="keyword">let</span> q <span class="operator">=</span> query.addingPercentEncoding(withAllowedCharacters: .urlQueryAllowed),</span><br><span class="line">                  <span class="keyword">let</span> url <span class="operator">=</span> <span class="type">URL</span>(string: <span class="string">&quot;https://openweathermap.org/data/2.5/find?q=<span class="subst">\(q)</span>&amp;appid=<span class="subst">\(appid)</span>&amp;units=metric&quot;</span>)</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="type">Effect</span>(error: .badURL)</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">return</span> <span class="type">URLSession</span>.shared.dataTaskPublisher(for: url)</span><br><span class="line">                .map &#123; <span class="variable">$0</span>.data &#125;</span><br><span class="line">                .decode(type: <span class="type">Find</span>.<span class="keyword">self</span>, decoder: <span class="type">JSONDecoder</span>())</span><br><span class="line">                .map &#123; <span class="variable">$0</span>.list &#125;</span><br><span class="line">                .mapError &#123; <span class="type">AppError</span>.networkingFailed(<span class="variable">$0</span>) &#125;</span><br><span class="line">                .eraseToEffect()</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><h3 id="屏幕适配"><a href="#屏幕适配" class="headerlink" title="屏幕适配"></a>屏幕适配</h3><p>通过 <code>@Environment</code> 获取 <code>horizontalSizeClass</code> 环境变量。</p><p>当 <code>horizontalSizeClass == .compact</code>，可能是竖屏的 iPhone 或者分屏下的 iPad。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Environment</span>(\.horizontalSizeClass) <span class="keyword">var</span> horizontalSizeClass: <span class="type">UserInterfaceSizeClass</span>?</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> horizontalSizeClass <span class="operator">==</span> .compact &#123;</span><br><span class="line">        <span class="type">VStack</span> &#123;</span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">HStack</span> &#123;</span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样还有 <code>verticalSizeClass</code></p><h3 id="数据来源"><a href="#数据来源" class="headerlink" title="数据来源"></a>数据来源</h3><p><a href="https://openweathermap.org/"><img alt="openweathermap" src="https://openweathermap.org/themes/openweathermap/assets/img/logo_white_cropped.png" width="120"/></a> <a href="https://openweathermap.org/">openweathermap.org</a></p><p>源码不含 appid，需要编译看效果可以去官网注册免费的 appid。然后赋值 <code>WeatherClient.swift</code>：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">let</span> appid <span class="operator">=</span> <span class="string">&quot;xxx&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;WeatherApp&quot;&gt;&lt;a href=&quot;#WeatherApp&quot; class=&quot;headerlink&quot; title=&quot;WeatherApp&quot;&gt;&lt;/a&gt;WeatherApp&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/Starkrimso</summary>
      
    
    
    
    
    <category term="SwiftUI" scheme="https://starkrimson.github.io/tags/SwiftUI/"/>
    
    <category term="TCA" scheme="https://starkrimson.github.io/tags/TCA/"/>
    
  </entry>
  
  <entry>
    <title>编写 dart 命令行程序</title>
    <link href="https://starkrimson.github.io/2021/07/21/dart-command-line-application/"/>
    <id>https://starkrimson.github.io/2021/07/21/dart-command-line-application/</id>
    <published>2021-07-21T02:00:00.000Z</published>
    <updated>2022-04-07T04:04:05.530Z</updated>
    
    <content type="html"><![CDATA[<p>dart command-line application</p><span id="more"></span><h3 id="1️⃣-创建应用"><a href="#1️⃣-创建应用" class="headerlink" title="1️⃣ 创建应用"></a>1️⃣ 创建应用</h3><p>使用 <code>dart create</code> 命令，以 <code>console-full</code> 模板创建一个命令行应用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ dart create -t console-full cli</span><br></pre></td></tr></table></figure><p>该命令会创建一个包含下述信息的 Dart 应用：</p><ul><li>一个主要的 Dart 源文件，<code>bin/cli.dart</code>，该文件包含一个顶层 <code>main()</code> 函数。该函数是你应用的入口。</li><li>一个额外的 Dart 文件，<code>lib/cli.dart</code>，包含一些功能性的函数方法，这些函数方法将会导入到 <code>cli.dart</code> 文件中。</li><li>一个 pubspec 文件，<code>pubspec.yaml</code>，包含应用的元数据，包括应用依赖的 <a href="https://dart.cn/guides/packages">package</a> 信息以及所需的版本等。</li></ul><h3 id="2️⃣-运行应用"><a href="#2️⃣-运行应用" class="headerlink" title="2️⃣ 运行应用"></a>2️⃣ 运行应用</h3><p>使用 <code>dart run</code> 命令在应用的根目录运行 Dart VM：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> cli</span><br><span class="line">$ dart run</span><br><span class="line">Hello world: 42!</span><br></pre></td></tr></table></figure><h3 id="3️⃣-输入输出"><a href="#3️⃣-输入输出" class="headerlink" title="3️⃣ 输入输出"></a>3️⃣ 输入输出</h3><p><code>stdin</code>, <code>stdout</code>, and <code>stderr</code>.</p><p>导入 <code>dart:io</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import <span class="string">&#x27;dart:io&#x27;</span>;</span><br></pre></td></tr></table></figure><ul><li><p><code>stdout</code> The standard output</p>  <figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">stdout.write(<span class="string">&#x27;Hello &#x27;</span>); <span class="comment">// 不换行</span></span><br><span class="line">stdout.writeln(<span class="string">&#x27;World&#x27;</span>); <span class="comment">// 换行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/// <span class="language-markdown">输出</span></span></span><br><span class="line">$ dart run bin/cli.dart</span><br><span class="line">Hello World!</span><br></pre></td></tr></table></figure></li><li><p><code>stdin</code> The standard input</p>  <figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">stdout.writeln(<span class="string">&#x27;Type something:&#x27;</span>);</span><br><span class="line"><span class="keyword">final</span> input = stdin.readLineSync(); <span class="comment">// 等待用户输入</span></span><br><span class="line">stdout.writeln(<span class="string">&#x27;Yout typed: <span class="subst">$input</span>&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/// <span class="language-markdown">输出</span></span></span><br><span class="line"><span class="built_in">Type</span> something:</span><br><span class="line">Hola</span><br><span class="line">Yout typed: Hola</span><br></pre></td></tr></table></figure></li><li><p><code>stderr</code> The standard input</p>  <figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (input != <span class="string">&#x27;Hola&#x27;</span>) &#123;</span><br><span class="line">  stderr.writeln(<span class="string">&#x27;error: input <span class="subst">$input</span> != \&#x27;Hola\&#x27;&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Type</span> something:</span><br><span class="line">Hello</span><br><span class="line">Yout typed: Hello</span><br><span class="line">error: input Hello != <span class="string">&#x27;Hola&#x27;</span> <span class="comment">// stderr</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="4️⃣-写入文件"><a href="#4️⃣-写入文件" class="headerlink" title="4️⃣ 写入文件"></a>4️⃣ 写入文件</h3><ul><li><p>新建文件，写入数据。</p>  <figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> file = File(<span class="string">&#x27;text.txt&#x27;</span>);</span><br><span class="line"><span class="keyword">final</span> str = <span class="string">&#x27;The quick brown fox jumps over the lazy dog.&#x27;</span>;</span><br><span class="line"><span class="keyword">await</span> file.writeAsString(str, mode: FileMode.write);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当前文件夹生成 text.txt 文件。</span></span><br></pre></td></tr></table></figure></li><li><p>打开文件，写入更多数据。</p>  <figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> file = File(<span class="string">&#x27;text.txt&#x27;</span>).openWrite(mode: FileMode.append);</span><br><span class="line"></span><br><span class="line">file.write(<span class="string">&#x27;The quick brown fox &#x27;</span>);</span><br><span class="line">file.writeln(<span class="string">&#x27;jumps over the lazy dog.&#x27;</span>);</span><br><span class="line"><span class="keyword">await</span> file.close();</span><br></pre></td></tr></table></figure></li></ul><h3 id="5️⃣-文件夹操作"><a href="#5️⃣-文件夹操作" class="headerlink" title="5️⃣ 文件夹操作"></a>5️⃣ 文件夹操作</h3><p>导入 <code>path</code> 库：<code>import &#39;package:path/path.dart&#39;;</code></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> dir = Directory(<span class="string">&#x27;lib&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">await</span> dir.exists()) &#123;</span><br><span class="line">  dir.createSync(); <span class="comment">// 新建文件夹</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> newFilePath = path.joinAll([dir.path, <span class="string">&#x27;cli.dart&#x27;</span>]); <span class="comment">// 使用 path 库 joinAll 拼接路径</span></span><br><span class="line">stdout.writeln(newFilePath);</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> newFile = File(newFilePath).openWrite(mode: FileMode.write);</span><br><span class="line">newFile.writeln(<span class="string">&#x27;import \&#x27;dart:io\&#x27;;&#x27;</span>);</span><br><span class="line">newFile.writeln(<span class="string">&#x27;print(\&#x27;Hello World!\&#x27;);&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="6️⃣-使用-platform-获取环境变量"><a href="#6️⃣-使用-platform-获取环境变量" class="headerlink" title="6️⃣ 使用 platform 获取环境变量"></a>6️⃣ 使用 <a href="https://api.dart.dev/stable/dart-io/Platform-class.html">platform</a> 获取环境变量</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> envVarMap = Platform.environment;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;PWD = <span class="subst">$&#123;envVarMap[<span class="string">&quot;PWD&quot;</span>]&#125;</span>&#x27;</span>);</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;LOGNAME = <span class="subst">$&#123;envVarMap[<span class="string">&quot;LOGNAME&quot;</span>]&#125;</span>&#x27;</span>);</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;PATH = <span class="subst">$&#123;envVarMap[<span class="string">&quot;PATH&quot;</span>]&#125;</span>&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="7️⃣-设置-exit-codes"><a href="#7️⃣-设置-exit-codes" class="headerlink" title="7️⃣ 设置 exit codes"></a>7️⃣ 设置 exit codes</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line">exitCode = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 0: Success</span></span><br><span class="line"><span class="comment">// 1: Warnings</span></span><br><span class="line"><span class="comment">// 2: Errors</span></span><br></pre></td></tr></table></figure><h3 id="8️⃣-解析命令行参数"><a href="#8️⃣-解析命令行参数" class="headerlink" title="8️⃣ 解析命令行参数"></a>8️⃣ 解析命令行参数</h3><ol><li><p>添加 <a href="https://pub.flutter-io.cn/packages/args">args</a> 依赖</p> <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">//</span> <span class="string">pubspec.yaml</span></span><br><span class="line"></span><br><span class="line"><span class="attr">dependencies:</span></span><br><span class="line">  <span class="attr">args:</span></span><br></pre></td></tr></table></figure></li><li><p>导入</p> <figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:args/args.dart&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p>使用 <code>ArgParser</code> 解析</p> <figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> parser = ArgParser()..addOption(<span class="string">&#x27;name&#x27;</span>, abbr: <span class="string">&#x27;n&#x27;</span>, help: <span class="string">&#x27;Greeting&#x27;</span>);</span><br><span class="line"><span class="keyword">final</span> argResults = parser.parse(arguments);</span><br><span class="line"><span class="keyword">final</span> name = argResults[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Hello <span class="subst">$name</span>!&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line">$ pub run cli -n World</span><br><span class="line">Hello World!</span><br></pre></td></tr></table></figure></li></ol><h3 id="9️⃣-多命令-CommandRunner"><a href="#9️⃣-多命令-CommandRunner" class="headerlink" title="9️⃣ 多命令  CommandRunner"></a>9️⃣ 多命令  <code>CommandRunner</code></h3><ol><li><p>导入</p> <figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:args/command_runner.dart&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p>自定义命令</p> <figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GreetingCommand</span> <span class="keyword">extends</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line">  GreetingCommand() &#123;</span><br><span class="line">    argParser.addOption(<span class="string">&#x27;name&#x27;</span>, abbr: <span class="string">&#x27;n&#x27;</span>, help: <span class="string">&#x27;Greeting&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">String</span> <span class="keyword">get</span> name =&gt; <span class="string">&#x27;greeting&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">String</span> <span class="keyword">get</span> description =&gt; <span class="string">&#x27;欢迎&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> run() &#123;</span><br><span class="line">    <span class="keyword">final</span> name = argResults[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Hello <span class="subst">$name</span>!&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用 <code>CommandRunner</code> 添加命令</p> <figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main(<span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; arguments) &#123;</span><br><span class="line">  CommandRunner(<span class="string">&#x27;cli&#x27;</span>, <span class="string">&#x27;desc&#x27;</span>)</span><br><span class="line">    ..addCommand(GreetingCommand())</span><br><span class="line">    ..run(arguments);</span><br><span class="line"></span><br><span class="line">  exitCode = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>命令行使用说明 (help)</p> <figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// cli 帮助</span></span><br><span class="line">$ pub run cli -h</span><br><span class="line">desc</span><br><span class="line"></span><br><span class="line">Usage: cli &lt;command&gt; [arguments]</span><br><span class="line"></span><br><span class="line">Global options:</span><br><span class="line">-h, --help    Print <span class="keyword">this</span> usage information.</span><br><span class="line"></span><br><span class="line">Available commands:</span><br><span class="line">  greeting   欢迎</span><br><span class="line"></span><br><span class="line">Run <span class="string">&quot;cli help &lt;command&gt;&quot;</span> <span class="keyword">for</span> more information about a command.</span><br><span class="line"></span><br><span class="line"><span class="comment">// greeting 帮助</span></span><br><span class="line">$ pub run cli greeting -h</span><br><span class="line">欢迎</span><br><span class="line"></span><br><span class="line">Usage: cli greeting [arguments]</span><br><span class="line">-h, --help    Print <span class="keyword">this</span> usage information.</span><br><span class="line">-n, --name    Greeting</span><br><span class="line"></span><br><span class="line">Run <span class="string">&quot;cli help&quot;</span> to see global options.</span><br></pre></td></tr></table></figure></li></ol><h3 id="🔟-catch-error"><a href="#🔟-catch-error" class="headerlink" title="🔟 catch error"></a>🔟 catch error</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main(<span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; arguments) <span class="keyword">async</span> &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> runner = CommandRunner&lt;<span class="built_in">int</span>&gt;(<span class="string">&#x27;cli&#x27;</span>, <span class="string">&#x27;desc&#x27;</span>)</span><br><span class="line">      ..addCommand(GreetingCommand());</span><br><span class="line">    <span class="keyword">final</span> result = <span class="keyword">await</span> runner.run(arguments);</span><br><span class="line">    exitCode = result;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e, s) &#123;</span><br><span class="line">    <span class="keyword">if</span> (e <span class="keyword">is</span> UsageException) &#123;</span><br><span class="line">      <span class="built_in">print</span>(red.wrap(e.message));</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">      <span class="built_in">print</span>(e.usage);</span><br><span class="line">      exitCode = ExitCode.usage.code;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">print</span>(red.wrap(e.toString()));</span><br><span class="line">      <span class="built_in">print</span>(red.wrap(s.toString()));</span><br><span class="line">      exitCode = ExitCode.unavailable.code;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ pub run cli greeting -n</span><br><span class="line">Missing argument <span class="keyword">for</span> <span class="string">&quot;name&quot;</span>.</span><br><span class="line"> </span><br><span class="line">Usage: cli greeting [arguments]</span><br><span class="line">-h, --help    Print <span class="keyword">this</span> usage information.</span><br><span class="line">-n, --name    Greeting</span><br><span class="line"></span><br><span class="line">Run <span class="string">&quot;cli help&quot;</span> to see global options.</span><br></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://dart.cn/tools/pub/cmd/pub-global">pub global 命令</a></p><p><a href="https://dart.cn/tutorials/server/cmdline">编写命令行应用</a></p><p><a href="https://dart.cn/tutorials/server/get-started">起步教程：编写命令行和服务端应用</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;dart command-line application&lt;/p&gt;</summary>
    
    
    
    
    <category term="Dart" scheme="https://starkrimson.github.io/tags/Dart/"/>
    
    <category term="command-line" scheme="https://starkrimson.github.io/tags/command-line/"/>
    
  </entry>
  
  <entry>
    <title>使用 altool 上传 ipa 至 TestFlight</title>
    <link href="https://starkrimson.github.io/2018/11/15/upload-ipa-with-altool/"/>
    <id>https://starkrimson.github.io/2018/11/15/upload-ipa-with-altool/</id>
    <published>2018-11-15T07:17:00.000Z</published>
    <updated>2022-04-07T04:04:05.530Z</updated>
    
    <content type="html"><![CDATA[<p>接上一篇，Jenkins 构建完成后，使用 altool 将 ipa 上传至 TestFlight。</p><span id="more"></span><h3 id="altool"><a href="#altool" class="headerlink" title="altool"></a>altool</h3><p><strong>Xcode 11 之后已不再提供 <code>Application Loader</code>，改用 <code>xcrun altool</code> 上传 ipa。</strong></p><p><del>altool 是 <code>Application Loader</code> 的命令行工具，可以用来验证和上传 app 文件至 App Store。</del></p><p>可以在这里找到它：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/Applications/Xcode.app/Contents/Applications/Application\ Loader.app/Contents/Frameworks/ITunesSoftwareService.framework/Versions/A/Support/altool</span><br></pre></td></tr></table></figure><h3 id="添加-shell"><a href="#添加-shell" class="headerlink" title="添加 shell"></a>添加 shell</h3><p>在 <code>xcodebuild -exportArchive</code> 步骤完成后，我们能得到一个打包好的 ipa 文件，注意导出使用的 <code>ExportOptions.plist</code> 里 <code>method</code> 是 <code>app-store</code>。</p><figure class="highlight plist"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>method<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>app-store<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br></pre></td></tr></table></figure><p>接下来 <code>Add build step -&gt; Execute Shell</code> 添加一个新的 shell 脚本。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--upload-app 上传 --validate-app 验证</span></span><br><span class="line">xcrun altool --upload-app \</span><br><span class="line">-f path_to_app.ipa \</span><br><span class="line">-u email@sample.com \</span><br><span class="line">-p @keychain:APP_SPECIFIC \</span><br><span class="line">--output-format normal</span><br></pre></td></tr></table></figure><p>altool 可以 <code>--validate-app</code> 验证和 <code>--upload-app</code> 上传，<code>-f</code> 指向 ipa 地址，<code>-u</code> <code>-p</code> 分别是 Apple ID 用户名和密码。这里密码需要注意一下，如果 Apple ID 开启了<strong>双重认证</strong>，需要给该 ID 生成一个 <code>APP-SPECIFIC PASSWORD</code>。</p><p><img src="/images/upload-ipa-with-altool/APP-SPECIFIC_PASSWORD.jpg" alt="image-20181115143746906"></p><p>如果未开启双重认证，那么密码就是 Apple ID 的密码。</p><h3 id="keychain"><a href="#keychain" class="headerlink" title="@keychain"></a>@keychain</h3><p>在 shell 脚本中使用明文密码是不理智的，我们可以使用 Keychain 来保存密码。</p><p><img src="/images/upload-ipa-with-altool/keychain_APP_SPECIFIC.png" alt="image-20181115144841295"></p><p>在 Keychain Access 新增 item。接下来 <code>-p @keychain:APP_SPECIFIC</code> 指定 item name 就好了。注意 <code>Account Name</code> 需要和 <code>-u username</code> 一致。</p><p>等待一段时间，如下提示就没什么问题了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">No errors validating archive at path_to_app.ipa</span><br><span class="line">No errors uploading &#x27;path_to_app.ipa&#x27;</span><br></pre></td></tr></table></figure><p>反过来如果有错误，也会有很详细的提示。</p><p>也可以使用 <code>--output-format xml</code> 获得更详细的输出。 </p><h3 id="一个小提示"><a href="#一个小提示" class="headerlink" title="一个小提示"></a>一个小提示</h3><p>每次 TestFlight 发布测试都会询问你的 app 有没有使用加密技术，勾选完后才能测试。这时可以在 <code>Info.plist</code> 添加 <code>ITSAppUsesNonExemptEncryption</code> 为 <code>false</code> 就可以了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;key&gt;ITSAppUsesNonExemptEncryption&lt;/key&gt;&lt;false/&gt;</span><br></pre></td></tr></table></figure><p>下次打包上传，接收到 App Store Connect 邮件 has completed processing 就能自动发布测试了（internal testing）。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://help.apple.com/itc/apploader/#/apdATD1E53-D1E1A1303-D1E53A1126">Apple help - Upload your app binary files with altool</a></p><p><a href="https://stackoverflow.com/questions/35739361/itsappusesnonexemptencryption-export-compliance-while-internal-testing">Stack Overflow - ITSAppUsesNonExemptEncryption export compliance while internal testing?</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;接上一篇，Jenkins 构建完成后，使用 altool 将 ipa 上传至 TestFlight。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Jenkins" scheme="https://starkrimson.github.io/tags/Jenkins/"/>
    
    <category term="Continuous integration" scheme="https://starkrimson.github.io/tags/Continuous-integration/"/>
    
    <category term="altool" scheme="https://starkrimson.github.io/tags/altool/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins + Xcode9 持续集成环境搭建</title>
    <link href="https://starkrimson.github.io/2018/05/29/Jenkins-with-Xcode9/"/>
    <id>https://starkrimson.github.io/2018/05/29/Jenkins-with-Xcode9/</id>
    <published>2018-05-29T02:17:00.000Z</published>
    <updated>2022-04-07T04:04:05.529Z</updated>
    
    <content type="html"><![CDATA[<p>最近搭建了一套 Jenkins + Xcode9 持续集成环境，记录一下。</p><span id="more"></span><h3 id="安装-Jenkins"><a href="#安装-Jenkins" class="headerlink" title="安装 Jenkins"></a>安装 Jenkins</h3><p>推荐通过 homebrew 安装，也可以通过下载 pkg 包安装（<a href="https://jenkins.io/download/thank-you-downloading-osx-installer/">Jenkins OSX Installer</a>），不过还是 brew 方便些。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install jenkins</span><br></pre></td></tr></table></figure><p>如果没安装 Java，需要先装一下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew cask install caskroom/versions/java8</span><br></pre></td></tr></table></figure><h3 id="初始化配置"><a href="#初始化配置" class="headerlink" title="初始化配置"></a>初始化配置</h3><p>这里提一下关键的点，就不一一截图细说了。</p><p>浏览器中打开 <a href="http://localhost:8080/">http://localhost:8080</a></p><p>第一次打开会提示去取 <code>initialAdminPassword</code>（一行红字标明路径，很明显）里的密码。<code>cat path/to/initialAdminPassword</code> 拿到后贴到输入框中 next。</p><p>→ 安装推荐的插件 → 创建用户。完成后重新登录 Jenkins。</p><p>接下来在 Manage Jenkins -&gt; Manage Plugins -&gt; Available 安装一些需要的插件：</p><ul><li><p>Xcode integration</p></li><li><p><del>Keychains and Provisioning Profiles Management</del></p><p>可能一些教程推荐装这个插件，然后配置一下 login.keychain 填一些证书信息什么的就很方便导出 <code>.ipa</code> 了。<strong>but</strong>，很遗憾 Xcode9 无法读取 login.keychain 的信息，现在导出需要提供一份 <code>ExportOptions.plist</code>，后面再具体说怎么操作。</p></li><li><p>GIT plugin</p></li><li><p>Git Parameter</p></li></ul><h3 id="局域网内访问-Jenkins"><a href="#局域网内访问-Jenkins" class="headerlink" title="局域网内访问 Jenkins"></a>局域网内访问 Jenkins</h3><p>使用 brew 安装 Jenkins 默认将 <code>httpListenAddress</code> 设置为 <code>127.0.0.1</code>，本机可以通过 <code>localhost:8080</code> 访问，但局域网内无法通过 <code>本机 ip:8080</code> 访问。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~/Library/LaunchAgents/homebrew.mxcl.jenkins.plist</span><br><span class="line">/usr/local/opt/jenkins/homebrew.mxcl.jenkins.plist</span><br></pre></td></tr></table></figure><p>将两个 plist 文件中 <code>httpListenAddress</code> 改为 0.0.0.0 重启 Jenkins 即可。</p><p>重启 Jenkins 可以执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew services restart jenkins</span><br></pre></td></tr></table></figure><p>或者在浏览器里：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8080/restart</span><br></pre></td></tr></table></figure><h3 id="创建-x2F-配置项目"><a href="#创建-x2F-配置项目" class="headerlink" title="创建&#x2F;配置项目"></a>创建&#x2F;配置项目</h3><p>Net Item → 输入 item name → Freestyle project → OK</p><p>Source Code Management 选择 Git，并填入相应的信息。</p><p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1frr84t10nfj317y0vsjv2.jpg" alt="Git 信息"></p><p>切换到 Build 栏，按顺序添加 build step。</p><p>由于我们使用 Cocoapods，首先安装 pod 的第三方库。</p><p>点击 Add build step → Execute shell</p><p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1frr84rhaq6j317y09i0ti.jpg" alt="add execute shell"></p><p>切换的 Podfile 文件目录下，执行 pod install 命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash -l</span></span><br><span class="line">cd $&#123;JOB_NAME&#125;</span><br><span class="line">export LANG=en_US.UTF-8</span><br><span class="line">pod install --verbose --no-repo-update</span><br></pre></td></tr></table></figure><p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1frr84ugauyj31820bwq4n.jpg" alt="pod install"></p><p>接下来添加另一个 build step，这次选择的是 Xcode。</p><p>使用 Cocoapods，Target 这栏不用填，点击右侧的 Settings，按截图设置下。</p><p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1frr84thlr7j318413ated.jpg" alt="Xcode general settings"></p><p>Code signing &amp; OS X keychain options 可以不设置。</p><p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1frr84s2xghj317u16an3m.jpg" alt="Xcode advanced options"></p><p>这里有个注意的地方，在 Xcode9 以前，可以勾选底下的 Pack application, build and sign .ipa?，并设置些相关的信息就能导出 .ipa。但是使用 Xcode9 会报这样的错误：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;Error Domain=IDEProvisioningErrorDomain Code=9 \&quot;\&quot;MyApp.app\&quot; requires a provisioning profile.\&quot; UserInfo=&#123;NSLocalizedDescription=\&quot;MyApp.app\&quot; requires a provisioning profile., NSLocalizedRecoverySuggestion=Add a profile to the \&quot;provisioningProfiles\&quot; dictionary in your Export Options property list.&#125;&quot;</span><br></pre></td></tr></table></figure><p>大概意思就是需要指定 ExportOptions.plist，这个文件内容大概是这样的：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">plist</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//Apple//DTD PLIST 1.0//EN&quot;</span> <span class="string">&quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plist</span> <span class="attr">version</span>=<span class="string">&quot;1.0&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>compileBitcode<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">false</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>method<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>ad-hoc<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>provisioningProfiles<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>⚠️ Bundle ID <span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">string</span>&gt;</span>⚠️ Provisioning Profile <span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>signingCertificate<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>iPhone Distribution<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>signingStyle<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>manual<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>stripSwiftSymbols<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>teamID<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>⚠️ teamID <span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>thinning<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span><span class="symbol">&amp;lt;</span>none<span class="symbol">&amp;gt;</span><span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plist</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以拷贝然后修改一下相应的 key value。不过一个简单获取这个文件的方式是：手动使用 Xcode9 打包，在导出 <code>.ipa</code> 的文件夹里应该有 4 个文件，其中一个就是 <code>ExportOptions.plist</code>。可以把它拷贝到 workspace 目录下。</p><p>☕️ 补充：如果 Signing 勾选了 Automatically manage signing，就简单多了，它的 <code>exportOptons.plist</code> 是这样的：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">plist</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//Apple//DTD PLIST 1.0//EN&quot;</span> <span class="string">&quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plist</span> <span class="attr">version</span>=<span class="string">&quot;1.0&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>compileBitcode<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">false</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>method<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>ad-hoc<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>signingStyle<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>automatic<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>stripSwiftSymbols<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>teamID<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>⚠️ teamID<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>thinning<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span><span class="symbol">&amp;lt;</span>none<span class="symbol">&amp;gt;</span><span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plist</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1frukz16h83j30tw09e3zn.jpg" alt="image-20180531155611396"></p><p>在 Xcode step 下面再添加一个 Execute shell</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xcodebuild -exportArchive -archivePath $&#123;WORKSPACE&#125;/build/$&#123;JOB_NAME&#125;.xcarchive -exportPath $&#123;JENKINS_HOME&#125;/jobs/$&#123;JOB_NAME&#125;/builds/$&#123;BUILD_NUMBER&#125;/archive -exportOptionsPlist $&#123;WORKSPACE&#125;/ExportOptions.plist</span><br></pre></td></tr></table></figure><p><code>-exportOptionsPlist $&#123;WORKSPACE&#125;/ExportOptions.plist</code> 这个选项就是指定刚刚拷贝到 workspace 的 plist。</p><p>到这里配置就完成了。回到 item 页面，点击 Build Now。</p><p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1frr84pmj21j315e0f8gnr.jpg" alt="Build Now"></p><p>左侧就能看到 building 的项目了，点击 Console Output 可以看到 log 记录，如无意外最后输出 <code>Finished: SUCCESS</code>。</p><p>可以在两个目录找到 <code>.xcarchive</code> 和 <code>.ipa</code> :</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/Users/yourname/.jenkins/workspace/jobName/build/jobName.xcarchive</span><br><span class="line">/Users/yourname/.jenkins/jobs/jobName/builds/buildNumber/archive</span><br></pre></td></tr></table></figure><h3 id="配置-Git-Parameter"><a href="#配置-Git-Parameter" class="headerlink" title="配置 Git Parameter"></a>配置 Git Parameter</h3><p>有时候想指定打某个分支的包，用 Git Parameter 就很方便了。</p><p>回到配置页最顶部，勾选 This project is parameterized，选择 Git Parameter</p><p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1frr84tyuj5j30sk0d2tae.jpg" alt="add parameter"></p><p>￼￼<img src="https://ws2.sinaimg.cn/large/006tNc79gy1frr84q4utxj317u0fswg3.jpg" alt="Git Parameter 配置"></p><p>Name 后面需要用到，Type 这里就选 Branch 了。</p><p>再到 Source Code Management，修改一下设置。</p><p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1frr84sl33bj317y0uwdj9.jpg" alt="Source code management"></p><p>红框部分修改为刚刚设置的 Name，以 <code>$</code> 开头。</p><p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1frr84qm8mtj31120fe769.jpg" alt="Build with Parameters"></p><p>这时 Build Now 就变成 Build with Parameters 了。右侧选择分支，然后开 build。</p><p><del>这个插件适合手动构建，如果设置了轮询自动构建，会因为找不到分支而构建失败，有什么好的方案告诉我啊。</del></p><p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1fsxjm3xge9j30wm0c4gmo.jpg" alt="image-20180703103936525"></p><p>点击右侧的 Advanced，有一栏「Default Value」可以指定默认的分支。这样轮询构建的时候就会自动选择这个分支。</p><h3 id="获取-Bundle-ID-和-Provisioning-Profile-生成-ExportOptions-plist"><a href="#获取-Bundle-ID-和-Provisioning-Profile-生成-ExportOptions-plist" class="headerlink" title="获取 Bundle ID 和 Provisioning Profile 生成 ExportOptions.plist"></a>获取 Bundle ID 和 Provisioning Profile 生成 ExportOptions.plist</h3><p>☕️ 补充：Signing 勾选了 Automatically manage signing 可以不操作这步。</p><p>现在可以指定任意的分支打包了，但可能每个分支的 Bundle ID 或者 Provisioning Profile 跟之前准备的 exportOptions 不一致，这样就得准备多一份 ExportOptions.plist。就写个脚本来获取吧。</p><p>方案是这样的，先准备一份 exportOptions 模版，通过 <code>xcodebuild -showBuildSettings</code> 获取 Bundle ID 和 Provisioning Profile，替换模版生成一个新的 <code>.plist</code>，export 命令指定这个新的 <code>.plist</code> 就好了。</p><p>在 <code>xcodebuild -exportArchive</code> 前 Add execute shell</p><p>这里就玩玩 Swift 脚本了，在文本开头加上 <code>!/usr/bin/env swift</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">#<span class="operator">!/</span>usr<span class="operator">/</span>bin<span class="operator">/</span>env swift</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这是一段 Swift 写的脚本（好玩）</span></span><br><span class="line"><span class="comment">// 作用是从 xcodebuild 中获取 bundle id 和 provisioning profile</span></span><br><span class="line"><span class="comment">// 输出新的 export options plist，在导出 ipa 时需要用到。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">executeShell</span>(<span class="keyword">_</span> <span class="params">arguments</span>: <span class="type">String</span>...) -&gt; (status: <span class="type">Int32</span>, output: <span class="type">String</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> process <span class="operator">=</span> <span class="type">Process</span>()</span><br><span class="line">    process.launchPath <span class="operator">=</span> <span class="string">&quot;/usr/bin/env&quot;</span></span><br><span class="line">    process.arguments <span class="operator">=</span> arguments</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> pipe <span class="operator">=</span> <span class="type">Pipe</span>()</span><br><span class="line">    process.standardOutput <span class="operator">=</span> pipe</span><br><span class="line"></span><br><span class="line">    process.launch()</span><br><span class="line">    process.waitUntilExit()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> data <span class="operator">=</span> pipe.fileHandleForReading.readDataToEndOfFile()</span><br><span class="line">    <span class="keyword">let</span> output <span class="operator">=</span> <span class="type">String</span>(data: data, encoding: .utf8)</span><br><span class="line">    <span class="keyword">return</span> (process.terminationStatus, output <span class="operator">??</span> <span class="string">&quot;&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> profiles <span class="operator">=</span> executeShell(<span class="string">&quot;xcodebuild&quot;</span>, <span class="string">&quot;-showBuildSettings&quot;</span>).output</span><br><span class="line">    .components(separatedBy: <span class="string">&quot;<span class="subst">\n</span>&quot;</span>)</span><br><span class="line">    .filter &#123;</span><br><span class="line">        <span class="variable">$0</span>.range(of: <span class="string">&quot;PRODUCT_BUNDLE_IDENTIFIER&quot;</span>) <span class="operator">!=</span> <span class="literal">nil</span> <span class="operator">||</span> <span class="variable">$0</span>.range(of: <span class="string">&quot;PROVISIONING_PROFILE_SPECIFIER&quot;</span>) <span class="operator">!=</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    .map &#123;</span><br><span class="line">        <span class="variable">$0</span>.replacingOccurrences(of: <span class="string">&quot; &quot;</span>, with: <span class="string">&quot;&quot;</span>).components(separatedBy: <span class="string">&quot;=&quot;</span>).last <span class="operator">??</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;profiles: <span class="subst">\(profiles)</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> directoryPath <span class="operator">=</span> <span class="string">&quot;/Users/yourname/Documents/ExportOptions/&quot;</span></span><br><span class="line"><span class="keyword">let</span> options <span class="operator">=</span> <span class="type">NSMutableDictionary</span>(contentsOfFile: directoryPath <span class="operator">+</span> <span class="string">&quot;ExportOptions_sample.plist&quot;</span>)</span><br><span class="line">options<span class="operator">?</span>[<span class="string">&quot;provisioningProfiles&quot;</span>] <span class="operator">=</span> [profiles[<span class="number">0</span>] : profiles[<span class="number">1</span>]]</span><br><span class="line">options<span class="operator">?</span>.write(toFile: directoryPath <span class="operator">+</span> <span class="string">&quot;ExportOptions.plist&quot;</span>, atomically: <span class="literal">true</span>)</span><br></pre></td></tr></table></figure><p>后面的 <code>-exportOptionsPlist</code> 指定 <code>directoryPath/ExportOptions.plist</code> 。</p><h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><p>采用 xcodebuild test + <a href="https://github.com/supermarin/xcpretty">xcpretty</a> 方案。</p><p>xcpretty 可以将 xcodebuild test 输出内容格式化，并且可以导出 xml、json 或者 html。</p><p>格式化的内容大概是这样子的：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">   ✓ testExample (0.001 seconds)</span><br><span class="line">   ◷ testPerformanceExample measured (0.000 seconds)</span><br><span class="line">   ✓ testPerformanceExample (0.362 seconds)</span><br><span class="line">   ✗ testString, XCTAssertTrue failed - 返回不是「你好世界」，测试不通过</span><br><span class="line"></span><br><span class="line">testString, XCTAssertTrue failed - 返回不是「你好世界」，测试不通过</span><br><span class="line">xx.swift:47</span><br><span class="line">   func testString() &#123;</span><br><span class="line">       XCTAssert(viewCtrl.returnAString() == &quot;你好世界&quot;, &quot;返回不是「你好世界」，测试不通过&quot;)</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>首先安装 xcpretty ：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem install xcpretty</span><br></pre></td></tr></table></figure><p>Add execute shell:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">xcodebuild test \</span><br><span class="line">-workspace $&#123;JOB_NAME&#125;.xcworkspace \</span><br><span class="line">-scheme $&#123;JOB_NAME&#125; \</span><br><span class="line">-destination &#x27;platform=iOS Simulator,name=iPhone 7&#x27; \</span><br><span class="line">| xcpretty -s -r html \</span><br><span class="line">--output $&#123;JENKINS_HOME&#125;/jobs/$&#123;JOB_NAME&#125;/builds/$&#123;BUILD_NUMBER&#125;/tests.html \</span><br><span class="line">&amp;&amp; exit $&#123;PIPESTATUS[0]&#125;</span><br></pre></td></tr></table></figure><p><code>&amp;&amp; exit $&#123;PIPESTATUS[0]&#125;</code> 使用 exit 参数帮助 Jenkins 确定是否失败。</p><p>可以把这段 shell 放在 pod install 之后，测试失败后 build 失败而不继续 archive。</p><h3 id="上传-ipa-到测试平台"><a href="#上传-ipa-到测试平台" class="headerlink" title="上传 ipa 到测试平台"></a>上传 ipa 到测试平台</h3><p>你可以找到平台提供的集成文档，例如 <a href="http://blog.fir.im/jenkins/">fir.im Jenkins 插件使用方法</a> 或者 <a href="https://www.pgyer.com/doc/view/jenkins_ios">蒲公英 - 使用 Jenkins 实现持续集成 (iOS)</a></p><p>这里演示使用 <a href="https://github.com/bumaociyuan/ios-ipa-server">ios-ipa-server</a> 搭建「本地自签名 https 服务器，快速安装 ipa」。</p><h4 id="安装-ios-ipa-server"><a href="#安装-ios-ipa-server" class="headerlink" title="安装 ios-ipa-server"></a>安装 ios-ipa-server</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g ios-ipa-server</span><br></pre></td></tr></table></figure><h4 id="开启-ios-ipa-server"><a href="#开启-ios-ipa-server" class="headerlink" title="开启 ios-ipa-server"></a>开启 ios-ipa-server</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> /path/of/ipa</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ios-ipa-server</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">or</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ios-ipa-server /path/of/ipa</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">open https://ip:port/download on your iphone</span></span><br></pre></td></tr></table></figure><h4 id="将导出的-ipa-文件复制到-ios-ipa-server-目录"><a href="#将导出的-ipa-文件复制到-ios-ipa-server-目录" class="headerlink" title="将导出的 ipa 文件复制到 ios-ipa-server 目录"></a>将导出的 ipa 文件复制到 ios-ipa-server 目录</h4><p>add Execute Shell：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash -l</span></span><br><span class="line">cd $&#123;JENKINS_HOME&#125;/jobs/$&#123;JOB_NAME&#125;/builds/$&#123;BUILD_NUMBER&#125;/archive</span><br><span class="line">DATE=$(date +%m%d-%H:%M)</span><br><span class="line">DISPLAY_NAME=$(/usr/libexec/PlistBuddy -c &quot;print CFBundleDisplayName&quot; $&#123;WORKSPACE&#125;/$&#123;JOB_NAME&#125;/Info.plist)</span><br><span class="line">cp $&#123;JOB_NAME&#125;.ipa ~/Documents/ipa/$&#123;DISPLAY_NAME&#125;$&#123;DATE&#125;.ipa</span><br></pre></td></tr></table></figure><p>关于证书问题，iOS 10.3 (不确定版本了) 以上除了需要安装描述文件外，还需要到「关于本机」- 「证书信任设置」将 ios-ipa-server 开启。</p><h3 id="Build-Triggers"><a href="#Build-Triggers" class="headerlink" title="Build Triggers"></a>Build Triggers</h3><p>可以设置一些触发构建条件。</p><h4 id="Trigger-builds-remotely"><a href="#Trigger-builds-remotely" class="headerlink" title="Trigger builds remotely"></a>Trigger builds remotely</h4><p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fsxjm4steoj317i0c2mzi.jpg" alt="image-20180703105112845"></p><p>在远程终端就可以通过以下指令来触发构建：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://username:password@ipAddr:8080/job/jobName/build\?token\=tokenName</span><br></pre></td></tr></table></figure><p>或者 <code>/buildWithParameters?</code>，指定 Git Parameter 的分支 <code>&amp;Branches=master</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://username:password@ipAddr:8080/job/jobName/buildWithParameters\?token\=tokenName\&amp;Branches\=master</span><br></pre></td></tr></table></figure><h5 id="Poll-SCM"><a href="#Poll-SCM" class="headerlink" title="Poll SCM"></a>Poll SCM</h5><p>Poll SCM 可以设置一个轮询周期，当 Git 上有代码更新才会触发构建：</p><p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fsxjm5qj7ij316e08sq42.jpg" alt="image-20180703110056338"></p><h3 id="可能出现的错误和解决"><a href="#可能出现的错误和解决" class="headerlink" title="可能出现的错误和解决"></a>可能出现的错误和解决</h3><h4 id="pod-command-not-found"><a href="#pod-command-not-found" class="headerlink" title="pod: command not found"></a>pod: command not found</h4><p>Execute shell 第一行加上 <code>!/bin/bash -l</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash -l</span></span><br><span class="line">cd FirstiOSItem</span><br><span class="line">export LANG=en_US.UTF-8</span><br><span class="line">pod install --verbose --no-repo-update</span><br></pre></td></tr></table></figure><p>export 语句将控制台语言环境设置为 UTF-8</p><h4 id="xcode-select-error-tool-‘xcodebuild’-requires-Xcode"><a href="#xcode-select-error-tool-‘xcodebuild’-requires-Xcode" class="headerlink" title="xcode-select: error: tool ‘xcodebuild’ requires Xcode"></a>xcode-select: error: tool ‘xcodebuild’ requires Xcode</h4><p>  xcode 路径错误，在终端输入以下：</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer/</span><br><span class="line">xcodebuild -showsdks</span><br><span class="line">xcrun --sdk iphoneos --show-sdk-path</span><br></pre></td></tr></table></figure><h4 id="error-exportArchive-“xx-app”-requires-a-provisioning-profile-Jenkins"><a href="#error-exportArchive-“xx-app”-requires-a-provisioning-profile-Jenkins" class="headerlink" title="error: exportArchive: “xx.app” requires a provisioning profile Jenkins"></a>error: exportArchive: “xx.app” requires a provisioning profile Jenkins</h4><p>正文已解决，参考<a href="https://ermayursharma.wordpress.com/2017/11/24/how-to-add-export-option-plist-in-jenkins/">链接</a>。</p><h3 id="最后，备份-Jenkins-配置"><a href="#最后，备份-Jenkins-配置" class="headerlink" title="最后，备份 Jenkins 配置"></a>最后，备份 Jenkins 配置</h3><p>理论上，把 <code>Jenkins Home</code>，也就是用户目录下 <code>.jenkins</code> 文件夹，打个 <code>.zip</code> 保存起来就可以了。<code>thinBackup</code> 就能做到这些，可以完全备份或者差异备份。</p><p>不过这里用的是 GitHub 上的一个脚本(<a href="https://gist.github.com/cenkalti/5089392">Backup Jenkins home periodicallly with git.</a>)，将 <code>*.xml</code> 配置文件保存到 git。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Setup</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># - Create a new Jenkins Job</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">- Mark <span class="string">&quot;None&quot;</span> <span class="keyword">for</span> Source Control Management</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">- Select the <span class="string">&quot;Build Periodically&quot;</span> build trigger</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  - configure to run as frequently as you like</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">- Add a new <span class="string">&quot;Execute Shell&quot;</span> build step</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  - Paste the contents of this file as the <span class="built_in">command</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">- Save</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">NOTE: before this job will work, you<span class="string">&#x27;ll need to manually navigate to the $JENKINS_HOME directory</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">and do the initial set up of the git repository.</span></span>  </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Make sure the appropriate remote is added and the default remote/branch set up.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"></span></span><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Jenkins Configuraitons Directory</span></span></span><br><span class="line">cd $JENKINS_HOME</span><br><span class="line">pwd</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Add general configurations, job configurations, and user content</span></span></span><br><span class="line">git add -- *.xml jobs/*/*.xml userContent/*</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">only add user configurations if they exist</span></span></span><br><span class="line">if [ -d users ]; then</span><br><span class="line">    user_configs=`ls users/*/config.xml`</span><br><span class="line"></span><br><span class="line">    if [ -n &quot;$user_configs&quot; ]; then</span><br><span class="line">        git add $user_configs</span><br><span class="line">    fi</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">mark as deleted anything that&#x27;</span>s been, well, deleted</span></span><br><span class="line">to_remove=`git status | grep &quot;deleted&quot; | awk &#x27;&#123;print $3&#125;&#x27;`</span><br><span class="line"></span><br><span class="line">if [ -n &quot;$to_remove&quot; ]; then</span><br><span class="line">    git rm --ignore-unmatch $to_remove</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">git commit -m &quot;Automated Jenkins commit&quot;</span><br><span class="line"></span><br><span class="line">git push -q -u origin master</span><br></pre></td></tr></table></figure><p>￼<img src="https://ws1.sinaimg.cn/large/006tNc79gy1frr84r0kdnj31800to0vw.jpg" alt="backup jenkins"></p><p>新建一个 Item，设置一个周期性 Build Trigger。<code>H 18 * * 5</code> 表示每周五 18 点…</p><p>Add Execute shell，将上面脚本填进去就行了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近搭建了一套 Jenkins + Xcode9 持续集成环境，记录一下。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Jenkins" scheme="https://starkrimson.github.io/tags/Jenkins/"/>
    
    <category term="Continuous integration" scheme="https://starkrimson.github.io/tags/Continuous-integration/"/>
    
  </entry>
  
  <entry>
    <title>ReadOn - 一个 Rss 阅读器</title>
    <link href="https://starkrimson.github.io/2017/09/06/ReadOnIntroduction/"/>
    <id>https://starkrimson.github.io/2017/09/06/ReadOnIntroduction/</id>
    <published>2017-09-06T09:40:00.000Z</published>
    <updated>2022-04-07T04:04:05.530Z</updated>
    
    <content type="html"><![CDATA[<p>开发 ReadOn 也有一段时间了，感觉是时候写一篇文章来介绍一下它了。</p><p>首先关于 ReadOn，它是一款 Rss 阅读器。在这里你可以搜索到喜欢的源并且订阅它，收藏和分享一些有趣的文章。目前可以在 <a href="https://itunes.apple.com/us/app/readon-%E4%B8%80%E4%B8%AA-rss-%E9%98%85%E8%AF%BB%E5%99%A8/id1212717344?l=zh&ls=1&mt=8">App Store</a> 下载。</p><span id="more"></span><h3 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h3><p>ReadOn 的外观非常简洁。作为一款阅读 app，我首先想到的是将内容占据整个屏幕。所以在一开始设计的时候我就决定不显示顶部的导航栏和底部 tab bar，但是如果没有导航栏，要怎么做到例如「返回」、「选项」等功能呢？手势，ReadOn 使用了很多手势，像右滑返回、长按菜单、3D Touch 预览等。</p><h3 id="主界面"><a href="#主界面" class="headerlink" title="主界面"></a>主界面</h3><p><img src="/images/ReadOnIntroduction/main.png"></p><p>刚安装上 ReadOn，由于还没有添加订阅源，首页显得有些空荡荡…侧滑划出左侧栏，添加上自己喜欢的源后，主界面饱满许多了。订阅源将根据文件夹分组，左侧显示订阅源的名称，右侧显示未读数，可通过设置关闭未读数的显示。</p><h3 id="订阅"><a href="#订阅" class="headerlink" title="订阅"></a>订阅</h3><p><img src="/images/ReadOnIntroduction/add.png"></p><p>在「添加」页面。这里集成了一些热门源标签，点击对应的标签即可查看相关的源。或者输入关键字来查找自己想要的源。点击搜索结果，将展示该订阅源的相关信息以及近期发布的文章。右上角的「添加」／「已添加」按钮可以订阅或者不再订阅该源。已订阅的源将会在主界面展示。</p><h3 id="阅读"><a href="#阅读" class="headerlink" title="阅读"></a>阅读</h3><p><img src="/images/ReadOnIntroduction/reading.png"></p><p>在文章列表中，每行展示该篇文章的标题、作者等信息，如果有缩略图也会一并显示。点击文章即可阅读，如前文所说的，文章内容将占据整个屏幕，可以更专注于阅读。底部有一些常用按钮，例如返回、收藏、分享等，在滑动阅读过程中会隐藏。</p><h3 id="收藏、同步、反馈"><a href="#收藏、同步、反馈" class="headerlink" title="收藏、同步、反馈"></a>收藏、同步、反馈</h3><p><img src="/images/ReadOnIntroduction/other.png"></p><p>当阅读到喜欢的文章，可以收藏它。收藏的文章统一收录在「收藏」中。可以从左侧栏找到它。</p><p>在 1.2 版本中，我添加了 iCloud 同步订阅源的功能。如果你同时有几台设备，并且希望每台设备都能看到统一的订阅源。那么这个功能非常好，在 iPhone 订阅一个源后，打开 iPad 就能阅读到这个源的文章了。</p><p>如果你喜欢😀（或者不喜欢😔）这款 app，欢迎到 App Store 给我评分。也可以通过邮件告诉我你的建议或者意见。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;开发 ReadOn 也有一段时间了，感觉是时候写一篇文章来介绍一下它了。&lt;/p&gt;
&lt;p&gt;首先关于 ReadOn，它是一款 Rss 阅读器。在这里你可以搜索到喜欢的源并且订阅它，收藏和分享一些有趣的文章。目前可以在 &lt;a href=&quot;https://itunes.apple.com/us/app/readon-%E4%B8%80%E4%B8%AA-rss-%E9%98%85%E8%AF%BB%E5%99%A8/id1212717344?l=zh&amp;ls=1&amp;mt=8&quot;&gt;App Store&lt;/a&gt; 下载。&lt;/p&gt;</summary>
    
    
    
    
    <category term="ReadOn" scheme="https://starkrimson.github.io/tags/ReadOn/"/>
    
  </entry>
  
  <entry>
    <title>TodayExtension (Widget)</title>
    <link href="https://starkrimson.github.io/2017/04/03/TodayExtension-(Widget)/"/>
    <id>https://starkrimson.github.io/2017/04/03/TodayExtension-(Widget)/</id>
    <published>2017-04-03T02:40:00.000Z</published>
    <updated>2022-04-07T04:04:05.530Z</updated>
    
    <content type="html"><![CDATA[<p>本文将介绍如何在「今日试图」中添加一个扩展，主要以 iOS10 Widget 为主。首先扩展是附属在一个应用内的，也就是我们不能通过 AppStore 直接下载一个扩展，它一定是和宿主 app 一起安装。扩展有自己独立的生命周期。下面将介绍如何创建一个扩展，如何与宿主 app 进行交互。</p><span id="more"></span><p>demo 地址 : <a href="https://github.com/Starkrimson/TodayExtension-Widget-demo">TodayExtension (Widget)</a></p><h2 id="1-添加-TodayExtendion-target"><a href="#1-添加-TodayExtendion-target" class="headerlink" title="1. 添加 TodayExtendion target"></a>1. 添加 TodayExtendion target</h2><p>点选菜单 <strong>File</strong> &gt; <strong>New</strong> &gt; <strong>Target…</strong>，在 <strong>iOS</strong> &gt; <strong>Application Extension</strong> 可以找到 <strong>TodayExtension</strong>，命名确认后让 Xcode 自动生成新的 Scheme。这时项目中会有一个和刚刚新建的 target 的同名文件夹，里面包含了<code>TodayViewController.swift</code> <code>MainInterface.storyboard</code> <code>info.plist</code> 3个文件。可以看到，在<code>storyboard</code>里默认添加了一个「Hello Wrold」的 label。现在运行一下项目，一切正常的话，会看到如下图：</p><p><img src="/images/TodayExtension/today1.png"></p><p>关于 widget 内容的展示，在 ViewController 里控制就行，具体想要展示的样子，开发者可以自由完成，这里就不展示了。</p><h2 id="2-iOS10-Widget-高度调整"><a href="#2-iOS10-Widget-高度调整" class="headerlink" title="2. iOS10 Widget 高度调整"></a>2. iOS10 Widget 高度调整</h2><p>如上图，一个 widget 的高度默认是 110。</p><ul><li>在右上角显示「展开&#x2F;折叠」按钮</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 需判断系统版本为10.0以上</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">#available</span>(<span class="keyword">iOSApplicationExtension</span> <span class="number">10.0</span>, <span class="operator">*</span>) &#123;</span><br><span class="line">    extensionContext<span class="operator">?</span>.widgetLargestAvailableDisplayMode <span class="operator">=</span> .expanded</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// Fallback on earlier versions</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/TodayExtension/today2.png"></p><ul><li>点击「展开&#x2F;折叠」按钮的回调并控制高度</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 同样需要判断版本为10.0以上</span></span><br><span class="line"><span class="keyword">@available</span>(<span class="keyword">iOSApplicationExtension</span> <span class="number">10.0</span>, <span class="operator">*</span>)</span><br><span class="line"><span class="keyword">func</span> <span class="title function_">widgetActiveDisplayModeDidChange</span>(<span class="keyword">_</span> <span class="params">activeDisplayMode</span>: <span class="type">NCWidgetDisplayMode</span>, <span class="params">withMaximumSize</span> <span class="params">maxSize</span>: <span class="type">CGSize</span>) &#123;</span><br><span class="line">    <span class="keyword">switch</span> activeDisplayMode &#123;</span><br><span class="line">    <span class="keyword">case</span> .compact:</span><br><span class="line">        preferredContentSize <span class="operator">=</span> <span class="type">CGSize</span>(width: <span class="number">0</span>, height: <span class="number">110</span>)</span><br><span class="line">    <span class="keyword">case</span> .expanded:</span><br><span class="line">        preferredContentSize <span class="operator">=</span> <span class="type">CGSize</span>(width: <span class="number">0</span>, height: <span class="number">220</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/TodayExtension/today3.png"></p><h2 id="3-使用-App-Groups-共享扩展和主应用数据"><a href="#3-使用-App-Groups-共享扩展和主应用数据" class="headerlink" title="3. 使用 App Groups 共享扩展和主应用数据"></a>3. 使用 App Groups 共享扩展和主应用数据</h2><p>由于沙盒的限制，我们不能直接在扩展和主应用间共享数据，这时候要用到 <strong>App Groups</strong>。App Groups 为同一个 vender 的应用或者扩展定义了一组域，在这个域中同一个 group 可以共享一些资源。</p><ul><li>开启 App Groups</li></ul><p>选择主 target 的 <strong>Capabilities</strong> 选项，找到 App Groups 选项，后面有个开关开启。并添加一个 goups name。这里添加一个<code>group.HelloTodayUserDefault</code> 。然后同样的在扩展的 target 也进行同样的步骤。<br><img src="/images/TodayExtension/today4.png"></p><ul><li>使用同一 groups 下的 userDefault 进行数据共享</li></ul><p>为了方便演示，我在主 target 里添加了一个 textView。textView 的文本修改后，将通过 userDefault 将数据共享给扩展。看下代码：</p><p>在宿主 app 中更改了 textView 的值，同步到 group 的 userDefault 中</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">textViewDidChange</span>(<span class="keyword">_</span> <span class="params">textView</span>: <span class="type">UITextView</span>) &#123;</span><br><span class="line"><span class="comment">// suiteName 与 Capabilities 添加的一致</span></span><br><span class="line">    <span class="keyword">let</span> userDefault <span class="operator">=</span> <span class="type">UserDefaults</span>(suiteName: <span class="string">&quot;group.HelloTodayUserDefault&quot;</span>)</span><br><span class="line">    userDefault<span class="operator">?</span>.set(textView.text, forKey: <span class="string">&quot;textView.value&quot;</span>)</span><br><span class="line">    userDefault<span class="operator">?</span>.synchronize()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在扩展中获取数据</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> userDefault <span class="operator">=</span> <span class="type">UserDefaults</span>(suiteName: <span class="string">&quot;group.HelloTodayUserDefault&quot;</span>)</span><br><span class="line">label.text <span class="operator">=</span> userDefault<span class="operator">?</span>.value(forKey: <span class="string">&quot;textView.value&quot;</span>) <span class="keyword">as?</span> <span class="type">String</span> <span class="operator">??</span> <span class="string">&quot;sth. wrong&quot;</span></span><br></pre></td></tr></table></figure><p><img src="/images/TodayExtension/today5.png"></p><h2 id="4-扩展和主应用共享代码"><a href="#4-扩展和主应用共享代码" class="headerlink" title="4. 扩展和主应用共享代码"></a>4. 扩展和主应用共享代码</h2><p>一个最简单的方式是把需要公用的代码文件加入扩展 target 的编译文件中，但是这么做不好的地方是，当这些共用的文件越来越多，添加到 target 这种方式将难以管理和维护。iOS8 之后 apple 提供了一个更好的方式，做成 Framework。</p><p>点选 <strong>File</strong> &gt; <strong>New</strong> &gt; <strong>Target</strong>…，在 <strong>Framework &amp; Library</strong> 可以找到 <strong>Cocoa Touch Framework</strong>，next 命名。</p><p>上面的代码里，suiteName 我都是直接使用字符串，这里很不好的就是万一两个地方写的不一样了，就有问题了。接下来我在 taget 里添加一个 swift 文件，用一个常量来记录这两个 key 值。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> groupSuiteName <span class="operator">=</span> <span class="string">&quot;group.HelloTodayUserDefault&quot;</span></span><br><span class="line"><span class="keyword">let</span> kTextValue <span class="operator">=</span> <span class="string">&quot;textView.value&quot;</span></span><br></pre></td></tr></table></figure><p>首先在主程序的 ViewController 中 import 刚刚新建的 Framework。这时我将原来的字符串替换为常量，发现 Xcode 会提示未定义之类的。这是由于同一个 module 中默认 <code>internal</code> 访问层级，现在代码处于不同的 module。所以需要更改 swift 文件的权限，在需要在外部访问的地方加上 <code>public</code> 关键字</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">let</span> groupSuiteName <span class="operator">=</span> <span class="string">&quot;group.HelloTodayUserDefault&quot;</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">let</span> kTextValue <span class="operator">=</span> <span class="string">&quot;textView.value&quot;</span></span><br></pre></td></tr></table></figure><p>接下来在 ViewController 中就可以直接使用了：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> userDefault <span class="operator">=</span> <span class="type">UserDefaults</span>(suiteName: groupSuiteName)</span><br><span class="line">userDefault<span class="operator">?</span>.set(textView.text, forKey: kTextValue)</span><br><span class="line">userDefault<span class="operator">?</span>.synchronize()</span><br></pre></td></tr></table></figure><p>同样的步骤，将 Framework 链接到扩展中</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> userDefault <span class="operator">=</span> <span class="type">UserDefaults</span>(suiteName: groupSuiteName)</span><br><span class="line">label.text <span class="operator">=</span> userDefault<span class="operator">?</span>.value(forKey: kTextValue) <span class="keyword">as?</span> <span class="type">String</span> <span class="operator">??</span> <span class="string">&quot;sth. wrong&quot;</span></span><br></pre></td></tr></table></figure><p>接下来编译可以通过，但是会收到一条警告：<br><img src="/images/TodayExtension/today6.png"></p><p>这是由于作为插件，需要严格遵守沙盒限制，一些 API 是不能使用的。避免这个警告，需要在 Framework 中声明使用的是扩展可用的 API。切换到 framework target 中的 <strong>General</strong> 选项，在 <strong>Deployment Info</strong> 下面勾选 <strong>Allow app extension API only</strong>。关于不可用的 API，apple 都标注了 <code>NS_EXTENSION_UNAVAILABLE</code>。</p><h2 id="5-从扩展进入主程序"><a href="#5-从扩展进入主程序" class="headerlink" title="5. 从扩展进入主程序"></a>5. 从扩展进入主程序</h2><p>扩展提供了 <code>NSExtensionContext</code> 类来与主应用交互，这里使用 <code>open</code> 方法就好了。</p><p>这里为了方便演示，我就直接给扩展的 view 添加一个点击手势了。由于这是一个 ViewController，我相信开发者会有很多操作的空间。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="keyword">func</span> <span class="title function_">viewDidLoad</span>() &#123;</span><br><span class="line"><span class="operator">...</span></span><br><span class="line">    <span class="keyword">let</span> tap <span class="operator">=</span> <span class="type">UITapGestureRecognizer</span>(target: <span class="keyword">self</span>, action: <span class="keyword">#selector</span>(tapAction))</span><br><span class="line">    view.addGestureRecognizer(tap)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">tapAction</span>() &#123;</span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> url <span class="operator">=</span> <span class="type">URL</span>(string: <span class="string">&quot;todayDemo://helloToday&quot;</span>) <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    extensionContext<span class="operator">?</span>.open(url, completionHandler: <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在主程序中添加对应的 <strong>URL Scheme</strong>：<br><img src="/images/TodayExtension/today7.png"></p><p>在 <code>AppDelegate.swift</code> 中捕获打开事件，做出对应操作：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">application</span>(<span class="keyword">_</span> <span class="params">app</span>: <span class="type">UIApplication</span>, <span class="params">open</span> <span class="params">url</span>: <span class="type">URL</span>, <span class="params">options</span>: [<span class="params">UIApplicationOpenURLOptionsKey</span> : <span class="keyword">Any</span>] <span class="operator">=</span> [:]) -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> url.scheme <span class="operator">==</span> <span class="string">&quot;todayDemo&quot;</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(url.host) <span class="comment">// -- helloToday</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>End.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文将介绍如何在「今日试图」中添加一个扩展，主要以 iOS10 Widget 为主。首先扩展是附属在一个应用内的，也就是我们不能通过 AppStore 直接下载一个扩展，它一定是和宿主 app 一起安装。扩展有自己独立的生命周期。下面将介绍如何创建一个扩展，如何与宿主 app 进行交互。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Swift" scheme="https://starkrimson.github.io/tags/Swift/"/>
    
    <category term="TodayExtension" scheme="https://starkrimson.github.io/tags/TodayExtension/"/>
    
    <category term="widget" scheme="https://starkrimson.github.io/tags/widget/"/>
    
  </entry>
  
  <entry>
    <title>3D Touch</title>
    <link href="https://starkrimson.github.io/2017/02/08/3D-Touch/"/>
    <id>https://starkrimson.github.io/2017/02/08/3D-Touch/</id>
    <published>2017-02-08T09:40:00.000Z</published>
    <updated>2022-04-07T04:04:05.529Z</updated>
    
    <content type="html"><![CDATA[<p>3D Touch 是 iPhone 6s 及以后机型带来的新功能，是一种立体触控技术，可以感应不同的感压力度。在 app 开发中，主要分为三大模块：<code>Quick Actions</code>、<code>Peek and Pop</code>、<code>Pressure Sensitivity</code></p><span id="more"></span><blockquote><p>iPhone 6s and iPhone 6s Plus bring a powerful new dimension to the Multi-Touch interface with 3D Touch. This new technology senses how deeply users press the display, letting them do more than ever with your apps and games.</p><p>— developer.apple.com</p></blockquote><p>demo 地址：<a href="https://github.com/Starkrimson/3D-Touch-Demo">3D-Touch-Demo</a></p><h2 id="1-Quick-Actions"><a href="#1-Quick-Actions" class="headerlink" title="1. Quick Actions"></a>1. Quick Actions</h2><p>在 Home 界面按压 app 图片，可以显示最多 4 个标签。点击不同的标签可以进入 app 并且处理相应的事件。下面来看下实现方法</p><p>创建 <code>Quick Actions</code> 有两种方式，1) 在 info.plist 文件中静态声明；2) 在程序初始化时利用代码动态添加</p><ul><li>静态声明<br><img src="/images/3D-Touch/quick-actions-02.png"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;key&gt;UIApplicationShortcutItems&lt;/key&gt;</span><br><span class="line">&lt;array&gt;</span><br><span class="line">&lt;dict&gt;</span><br><span class="line">&lt;key&gt;UIApplicationShortcutItemType&lt;/key&gt;</span><br><span class="line">&lt;string&gt;share&lt;/string&gt;</span><br><span class="line">&lt;key&gt;UIApplicationShortcutItemTitle&lt;/key&gt;</span><br><span class="line">&lt;string&gt;分享&lt;/string&gt;</span><br><span class="line">&lt;key&gt;UIApplicationShortcutItemIconType&lt;/key&gt;</span><br><span class="line">&lt;string&gt;UIApplicationShortcutIconTypeShare&lt;/string&gt;</span><br><span class="line">&lt;/dict&gt;</span><br><span class="line">&lt;/array&gt;</span><br></pre></td></tr></table></figure></li></ul><p>如上，其中<code>UIApplicationShortcutItemType</code>、<code>UIApplicationShortcutItemTitle </code>是必填项。<code>UIApplicationShortcutItemIconType</code>、<code>UIApplicationShortcutItemIconFile</code>、<code>UIApplicationShortcutItemSubtitle</code>为选填项。</p><ul><li>动态添加</li></ul><p>通过代码，指定<code>application.shortcutItems</code>快捷方式数组，可在如下方法中添加 (具体位置可根据自己情况而定)。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">application</span>(<span class="keyword">_</span> <span class="params">application</span>: <span class="type">UIApplication</span>, <span class="params">didFinishLaunchingWithOptions</span> <span class="params">launchOptions</span>: [<span class="params">UIApplicationLaunchOptionsKey</span>: <span class="keyword">Any</span>]<span class="operator">?</span>) -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> shareItem <span class="operator">=</span> <span class="type">UIApplicationShortcutItem</span>(type: <span class="string">&quot;share&quot;</span>, localizedTitle: <span class="string">&quot;分享&quot;</span>, localizedSubtitle: <span class="literal">nil</span>, icon: <span class="type">UIApplicationShortcutIcon</span>(type: .share), userInfo: <span class="literal">nil</span>)</span><br><span class="line">    <span class="comment">// ... 更多 item 设置</span></span><br><span class="line">    application.shortcutItems <span class="operator">=</span> [shareItem]</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行程序后，按压 app 图标，将可以看到一个「分享」的标签。</p><ul><li>响应回调</li></ul><p><code>UIApplication</code>提供了一个方法接听 <code>shortcutItem</code>的点击</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">application</span>(<span class="keyword">_</span> <span class="params">application</span>: <span class="type">UIApplication</span>, <span class="params">performActionFor</span> <span class="params">shortcutItem</span>: <span class="type">UIApplicationShortcutItem</span>, <span class="params">completionHandler</span>: <span class="keyword">@escaping</span> (<span class="type">Bool</span>) -&gt; <span class="type">Void</span>) &#123;</span><br><span class="line"><span class="comment">// 可通过之前设置的 type 唯一标示区分点击的按钮，作出不同的响应</span></span><br><span class="line">    <span class="keyword">switch</span> shortcutItem.type &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;share&quot;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;clicked share&quot;</span>)</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 iOS10 中，如果该 app 还添加了 todayExtension。在按压 app 图标后，在 quick actions 上方还会显示该 app 的 widget。如果自带的「天气」app。</p><p><img src="/images/3D-Touch/quick-actions-03.png"></p><h2 id="2-Peek-and-Pop"><a href="#2-Peek-and-Pop" class="headerlink" title="2. Peek and Pop"></a>2. Peek and Pop</h2><p><img src="/images/3D-Touch/peek-and-pop-01.png"></p><p>Peek and Pop 大概分为 3 个步骤，1) 轻按，焦点高亮其余部分变模糊。2) 加大力度，出现目标 ViewController 预览。3) 这时可以继续重压 push 至目标 ViewController (或者自定义动作)；或者手指上滑，将出现右图的<code>PreviewAction</code></p><p>由于 3D Touch 需要 iPhone 6s 以上机型支持，所以需要判断 3D Touch 的可用性</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">traitCollection.forceTouchCapability <span class="operator">==</span> .available <span class="operator">?</span> <span class="keyword">_</span> <span class="operator">=</span> registerForPreviewing(with: <span class="keyword">self</span>, sourceView: cell) : ()</span><br></pre></td></tr></table></figure><p>这里使用了一个三目，如果是可用的，则执行<code>registerForPreviewing</code>注册，设置 cell 为 sourceView</p><p>接下来遵循<code>UIViewControllerPreviewingDelegate</code>协议，实现其方法</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extension</span> <span class="title class_">ViewController</span>: <span class="title class_">UIViewControllerPreviewingDelegate</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 重压后触发</span></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">previewingContext</span>(<span class="keyword">_</span> <span class="params">previewingContext</span>: <span class="type">UIViewControllerPreviewing</span>, <span class="params">commit</span> <span class="params">viewControllerToCommit</span>: <span class="type">UIViewController</span>) &#123;</span><br><span class="line">        navigationController<span class="operator">?</span>.pushViewController(<span class="type">DetailViewController</span>(), animated: <span class="literal">true</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 返回触发 Peek 事件的原始图</span></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">previewingContext</span>(<span class="keyword">_</span> <span class="params">previewingContext</span>: <span class="type">UIViewControllerPreviewing</span>, <span class="params">viewControllerForLocation</span> <span class="params">location</span>: <span class="type">CGPoint</span>) -&gt; <span class="type">UIViewController</span>? &#123;</span><br><span class="line">        <span class="keyword">let</span> detailViewController <span class="operator">=</span> <span class="type">DetailViewController</span>()</span><br><span class="line">        <span class="keyword">return</span> detailViewController</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上滑后出现的 <code>PreviewAction</code>需要在目标 ViewController 中实现。同样需要注册 <code>registerForPreviewing</code>和遵循<code>UIViewControllerPreviewingDelegate</code>。并且额外重写一个计算型属性</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="keyword">var</span> previewActionItems: [<span class="type">UIPreviewActionItem</span>] &#123;</span><br><span class="line">    <span class="keyword">let</span> item <span class="operator">=</span> <span class="type">UIPreviewAction</span>(title: <span class="string">&quot;Greet&quot;</span>, style: .default) &#123; (action, viewController) <span class="keyword">in</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Hello&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> [item]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;3D Touch 是 iPhone 6s 及以后机型带来的新功能，是一种立体触控技术，可以感应不同的感压力度。在 app 开发中，主要分为三大模块：&lt;code&gt;Quick Actions&lt;/code&gt;、&lt;code&gt;Peek and Pop&lt;/code&gt;、&lt;code&gt;Pressure Sensitivity&lt;/code&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="Swift" scheme="https://starkrimson.github.io/tags/Swift/"/>
    
    <category term="3D Touch" scheme="https://starkrimson.github.io/tags/3D-Touch/"/>
    
  </entry>
  
  <entry>
    <title>如何愉快地处理 Optional</title>
    <link href="https://starkrimson.github.io/2016/10/29/About-Swift-Optional/"/>
    <id>https://starkrimson.github.io/2016/10/29/About-Swift-Optional/</id>
    <published>2016-10-29T00:54:00.000Z</published>
    <updated>2022-04-07T04:04:05.529Z</updated>
    
    <content type="html"><![CDATA[<p>比较好的几种处理 Optional 的方法。</p><span id="more"></span><h2 id="1-「-」-操作符"><a href="#1-「-」-操作符" class="headerlink" title="1.「 ?? 」 操作符"></a>1.「 ?? 」 操作符</h2><p>在使用 <code>??</code> 之前，先来复习下三目运算符：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> max <span class="operator">=</span> a <span class="operator">&gt;</span> b <span class="operator">?</span> a : b</span><br><span class="line"><span class="comment">//如果 a &gt; b 为真，返回 a， 为假返回 b。</span></span><br></pre></td></tr></table></figure><p>再来看下 <code>??</code> 的用法</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> i: <span class="type">Int</span>? <span class="operator">=</span> <span class="number">100</span></span><br><span class="line"><span class="keyword">let</span> x <span class="operator">=</span> i <span class="operator">??</span> <span class="number">0</span> <span class="comment">// x = 100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> y: <span class="type">Int</span>? <span class="operator">=</span> <span class="literal">nil</span></span><br><span class="line"><span class="keyword">let</span> z <span class="operator">=</span> y <span class="operator">??</span> <span class="number">0</span> <span class="comment">// y = 0</span></span><br></pre></td></tr></table></figure><p><code>??</code> 与三目运算类似，如果一个 optional 有值，使用值。如果没值，使用 <code>??</code> 后面的值。</p><p>如果按住 <code>⌥ Optoian </code> 点击 <code>x</code> 和 <code>z</code>。可以看到它们的类型推导为 <code>let x: Int</code> <code>let z: Int</code>，并<strong>不是</strong>一个可选值</p><p>利用 <code>??</code> 操作符，可以起到给一个 optional 属性设置一个默认值的作用。 在后续使用中不需要考虑解包的问题。</p><h2 id="2-Optional-Binding-可选绑定"><a href="#2-Optional-Binding-可选绑定" class="headerlink" title="2. Optional Binding 可选绑定"></a>2. Optional Binding 可选绑定</h2><h3 id="2-1-if-let"><a href="#2-1-if-let" class="headerlink" title="2.1 if let"></a>2.1 <code>if let</code></h3><p>来看一个小🌰：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">contact</span>(<span class="params">name</span>: <span class="type">String</span>?, <span class="params">phone</span>: <span class="type">String</span>?) &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> name <span class="operator">=</span> name, <span class="keyword">let</span> phone <span class="operator">=</span> phone &#123;</span><br><span class="line">    <span class="comment">// 只有当 name 和 phone 一定有值，</span></span><br><span class="line">    才会进入该分支</span><br><span class="line">        <span class="keyword">let</span> contact <span class="operator">=</span> name <span class="operator">+</span> <span class="string">&quot; &quot;</span> <span class="operator">+</span> phone <span class="comment">// 可以直接参与计算</span></span><br><span class="line">        <span class="built_in">print</span>(contact)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;name or phone nil&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例子中的函数，有两个参数并且都是可选的。那么在函数内部就要考虑到参数的解包问题。使用 if let 可选绑定成功后，name 和 age 都一定有值，可直接使用。它们的类型推导都是非可选值。</p><p>可以看到，我在使用 <code>if let name = name</code> 的时候，使用了同名的变量来接收值，在后续使用都是非空值。可以避免想变量名的烦恼…</p><p>在整个函数实现内部，没有出现一个 <code>?</code> 或者 <code>!</code> 。是不是看到和清爽？(并且更安全)</p><h3 id="2-2-guard-let"><a href="#2-2-guard-let" class="headerlink" title="2.2 guard let"></a>2.2 <code>guard let</code></h3><p>guard let 刚好与 if let 相反</p><p>再来一个🌰：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">contact</span>(<span class="params">name</span>: <span class="type">String</span>?, <span class="params">phone</span>: <span class="type">String</span>?) &#123;</span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> name <span class="operator">=</span> name, <span class="keyword">let</span> phone <span class="operator">=</span> phone <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 当 name 或者 phone 为 nil，才会进入该分支</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;name or phone nil&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="comment">// 在分支的最后，需要有 return 或者 break ...</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 如果没有进入 guard 分支，则 name 和 phone 都有值，可直接参与计算</span></span><br><span class="line">    <span class="keyword">let</span> contact <span class="operator">=</span> name <span class="operator">+</span> <span class="string">&quot; &quot;</span> <span class="operator">+</span> phone</span><br><span class="line">    <span class="built_in">print</span>(contact)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>guard let 在日常开发使用的更多一些，我们可以在 guard 分支里做一些错误处理，然后返回。</p><p>如果没有进入 guard 分支，那么后面那些变量的都是有值的。可以直接使用</p><blockquote><p>同样的还有 <code>if var</code> 、 <code>guard var</code></p></blockquote><h2 id="3-Optional-Map"><a href="#3-Optional-Map" class="headerlink" title="3. Optional Map"></a>3. Optional Map</h2><p>如果有  <code>let i: Int?</code> ，i 是一个整型可选值，我想对它 *2 并且返回一个新的值。如果 i 有值的话就 *2 然后返回，如果没值则返回 nil。使用可选绑定可以这么写：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x: <span class="type">Int</span>?</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> i <span class="operator">=</span> i &#123;</span><br><span class="line">    x <span class="operator">=</span> i <span class="operator">*</span> <span class="number">2</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    x <span class="operator">=</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但有个更简洁的方法是使用 <code>map</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> i: <span class="type">Int</span>? <span class="operator">=</span> <span class="number">100</span></span><br><span class="line"><span class="keyword">let</span> x <span class="operator">=</span> i.map &#123; <span class="variable">$0</span> <span class="operator">*</span> <span class="number">2</span> &#125; <span class="comment">// --&gt; let x: Int?; x = 200</span></span><br></pre></td></tr></table></figure><p>使用 <code>map</code> 可以方便地操作一个 optional，而不需要进行手动的解包工作</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;比较好的几种处理 Optional 的方法。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Swift" scheme="https://starkrimson.github.io/tags/Swift/"/>
    
    <category term="Optional" scheme="https://starkrimson.github.io/tags/Optional/"/>
    
  </entry>
  
</feed>
